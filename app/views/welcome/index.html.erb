<!DOCTYPE html>
<meta charset="utf-8">

<body>

<div id="chart">
  <svg></svg>
</div>
<div id="text">
  "Hello World"
</div>
<style type="text/css">
  
  #chart svg{
    height: 500px;
  }

body {
  font: 12px sans-serif;
background-color: black;
}

.nvd3 text {
  fill: white;
}

</style>

<script>


var transformData = function(data){

  var format = d3.time.format("%Y");

  var appearCount = {};
  var numberOfyears=1;



  data.forEach(function(d) {
    d.key = d.industry;
    d.date = format.parse(d.year);
    d.value = +d.total.substring(1).replace(/,/g, '');
    //console.log('datum : ', d );

    if(!appearCount[d.key]){
      appearCount[d.key] = 1;
    }else{
      var count = appearCount[d.key] + 1;
      if(count > numberOfyears){
        numberOfyears = count;
      }
      appearCount[d.key] = count;
    }
    d;
  });


  var finalIndustriesNames = Object.keys(appearCount).filter(
      function(d){
        return appearCount[d] == numberOfyears;
      }
    );

    var finalIndustries = data.filter(function(d){
      return finalIndustriesNames.find(function(x){ return x == d.key; }) && true || false;
    });


    data = finalIndustries;
    return data;
};


var linda = function(){

/*
{
  key: "Gas & Oil",
  values: [["2014",32434345],["2015",345345]]
}
*/


d3.json("data/open_secrets_donor", function(error, data) {
    if (error) throw error;


  var singleIndustries = {};
  var finalData = [];

  data = transformData(data);

  console.log('data',data);

  data.forEach(function(d){

    if(!singleIndustries[d.key]){
      singleIndustries[d.key] = d;
      singleIndustries[d.key]['values'] = [[d.year,d.value]];
    }else{
      singleIndustries[d.key]['values'].push( [d.year,d.value] );
    }

  });

  Object.keys(singleIndustries).forEach(function(d){
    finalData.push( singleIndustries[d]  );
  });

  console.log(finalData)

  nv.addGraph(function() {
    var chart = nv.models.stackedAreaChart()
                  .margin({right: 100})
                  .x(function(d) { return +d[0] })   //We can modify the data accessor functions...
                  .y(function(d) { return d[1] })   //...in case your data is formatted differently.
                  .useInteractiveGuideline(true)    //Tooltips which show all data points. Very nice!
                  .rightAlignYAxis(true)      //Let's move the y-axis to the right side.
                  //.transitionDuration(500)
                  .showControls(true)       //Allow user to choose 'Stacked', 'Stream', 'Expanded' mode.
                  .clipEdge(true);

    //Format x-axis labels with custom function.
    chart.xAxis
        .tickFormat(function(d) { 
          return d;//d3.time.format('%Y')(new Date(d)) 
    });

    chart.yAxis
        .tickFormat(d3.format(',.2f'));

    d3.select('#chart svg')
      .datum(finalData)
      .call(chart);

    nv.utils.windowResize(chart.update);

    return chart;
  });
})


};

linda();//call linda



</script>