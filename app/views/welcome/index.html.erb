<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 12px sans-serif;
  background-color: gray;

}

.axis text {
  fill: white;
  stroke: white;
}

.axis path,
.axis line {
  fill: none;
  stroke: white;
  shape-rendering: crispEdges;
}
/*path.layers:hover {
  fill: red;
}
*/

</style>
<body>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>
var format = d3.time.format("%Y");

var margin = {top: 70, right: 60, bottom: 30, left: 80},
    width = 1200 - margin.left - margin.right,
    height = 600 - margin.top - margin.bottom;

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

var z = d3.scale.category20b();

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .ticks(d3.time.years);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var stack = d3.layout.stack()
    .offset("zero")
    .values(function(d) { return d.values; })
    .x(function(d) { return d.date; })
    .y(function(d) { return d.value; });

var nest = d3.nest()
    .key(function(d) { return d.key; });

var area = d3.svg.area()
    .interpolate("cardinal")
    .x(function(d) { return x(d.date); })
    .y0(function(d) { return y(d.y0); })
    .y1(function(d) { return y(d.y0 + d.y); });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    
d3.json("data/open_secrets_donor", function(error, data) {
  if (error) throw error;
  
  var totals = [];

 data.forEach(function(d) {
    var number = +d.total.substring(1).replace(/,/g, '');
    totals.push({key: d.industry, value: number, date: format.parse("2016")});
    totals.push({key: d.industry, value: number * 0.8, date: format.parse("2014")});
    totals.push({key: d.industry, value: number * 0.6, date: format.parse("2012")});
    totals.push({key: d.industry, value: number * 0.5, date: format.parse("2010")});
  });
  

  console.log(totals);

  var layers = stack(nest.entries(totals));

  x.domain(d3.extent(totals, function(d) { return d.date; }));
  y.domain([0, d3.max(totals, function(d) { return d.y0 + d.y; })]);

  svg.selectAll(".layer")
      .data(layers)
    .enter().append("path")
      .attr("class", "layer")
      .attr("d", function(d) { return area(d.values); })
      .style("fill", function(d, i) { return z(i); })
       .style("fill", function(d, i) { return z(i); })
      //.style("opacity", 0.6)
      .on("mouseover", function() {
        d3.select(this).style("stroke", 'grey')
          .style("stroke-width", 2);
      })
      .on("mouseout", function(d, i) {
        d3.select(this).style("stroke", 'none');
      })
      .append("title")
      .text(function(d) { return d.key; });

      //STYLE FOR HOVER ON STREAMLINE

      // .style("opacity", 0.6)
      // .on("mouseover", function() {
      //   d3.select(this).style("opacity", 1);
      // })
      // .on("mouseout", function(d, i) {
      //   d3.select(this).style("opacity", 0.6);
      // })
      // .append("title")
      // .text(function(d) { return d.key; });


  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
});

</script>